import type { Cells, Game, Grid } from "./Game"

import Dictionary from "Dictionary"
import List from "List"
import Set from "Set"
import { assertEquals, test } from "Test"

import { Game, empty, tick } from "./Game"



/**
 * Rules
 * 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation.
 * 2. Any live cell with two or three live neighbors lives on to the next generation.
 * 3. Any live cell with more than three live neighbors dies, as if by overpopulation.
 * 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
 */


make3x3Game :: Cells -> Game
make3x3Game = (cells) => Game(
  [
    { x: 0, y: 0 },
    { x: 1, y: 0 },
    { x: 2, y: 0 },
    { x: 0, y: 1 },
    { x: 1, y: 1 },
    { x: 2, y: 1 },
    { x: 0, y: 2 },
    { x: 1, y: 2 },
    { x: 2, y: 2 },
  ],
  cells,
)


getGrid :: Game -> Grid
getGrid = where {
  Game(g, _) =>
    g
}

test("empty - empty grid", () => assertEquals(empty(0, 0), Game([], Dictionary.empty)))

test(
  "empty - 6x4 should have 24 squares",
  () => assertEquals(
    pipe(
      empty(6),
      getGrid,
      List.length,
    )(4),
    24,
  ),
)

test(
  "empty - 2x3 should build a correct grid",
  () => assertEquals(
    pipe(
      empty(2),
      getGrid,
    )(3),
    [
      { x: 0, y: 0 },
      { x: 1, y: 0 },
      { x: 0, y: 1 },
      { x: 1, y: 1 },
      { x: 0, y: 2 },
      { x: 1, y: 2 },
    ],
  ),
)

test(
  "tick - a single cell will die",
  () => assertEquals(
    pipe(
      make3x3Game,
      tick,
    )(Dictionary.singleton(1, Set.singleton(1))),
    make3x3Game(Dictionary.empty),
  ),
)


test(
  `tick
  [x][ ][ ]     [ ][ ][ ]
  [ ][x][ ]  -> [x][x][ ]
  [x][ ][ ]     [ ][ ][ ]
  `,
  () => assertEquals(
    pipe(
      make3x3Game,
      tick,
    )(Dictionary.fromList([#[0, Set.fromList([0, 2])], #[1, Set.fromList([1])]])),
    make3x3Game(Dictionary.fromList([#[0, Set.fromList([1])], #[1, Set.fromList([1])]])),
  ),
)


test(
  `tick
  [x][ ][ ]     [x][x][ ]
  [x][x][ ]  -> [x][x][ ]
  [ ][ ][ ]     [ ][ ][ ]
  `,
  () => assertEquals(
    pipe(
      make3x3Game,
      tick,
    )(Dictionary.fromList([#[0, Set.fromList([0, 1])], #[1, Set.fromList([1])]])),
    make3x3Game(Dictionary.fromList([#[0, Set.fromList([0, 1])], #[1, Set.fromList([0, 1])]])),
  ),
)
