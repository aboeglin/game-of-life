import type { Set } from "Set"

import { EQ, GT, LT } from "Compare"
import Dictionary from "Dictionary"
import IO from "IO"
import Integer from "Integer"
import List from "List"
import Math from "Math"
import { Just, Nothing } from "Maybe"
import Set from "Set"
import Terminal from "./Terminal"



alias Vec2 = { x :: Integer, y :: Integer }

export alias Cells = Dictionary Integer (Set Integer)

instance Comparable { x :: Integer, y :: Integer } {
  compare = (a, b) => a.x > b.x ? GT : a.x < b.x ? LT : a.y > b.y ? GT : a.y < b.y ? LT : EQ
}


export alias Grid = List Vec2

export type Game = Game(Grid, Dictionary Integer (Set Integer))

type SquareState = Dead | Alive
type SquareInfo = SquareInfo(Vec2, SquareState, Integer)


getGrid :: Game -> Grid
getGrid = where {
  Game(grid, _) =>
    grid
}


getCells :: Game -> Cells
getCells = where {
  Game(_, cells) =>
    cells
}


makeGrid :: Integer -> Integer -> Grid
makeGrid = (w, h) => pipe(
  List.range(0),
  ap(
    pipe(
      List.range(0),
      map((y, x) => ({ x, y })),
    )(h),
  ),
)(w)


randomCells :: Integer -> Integer -> Cells
randomCells = (w, h) => List.reduce(
  (rows, y) => {
    columns = List.reduce(
      (cols, x) => Math.random() > 0.8 ? Set.insert(x, cols) : cols,
      Set.empty,
      List.range(0, h),
    )
    return Dictionary.insert(y, columns, rows)
  },
  Dictionary.empty,
  List.range(0, w),
)


empty :: Integer -> Integer -> Game
export empty = (w, h) => pipe(
  makeGrid(w),
  Game($, Dictionary.empty),
)(h)


random :: Integer -> Integer -> Game
export random = (w, h) => Game(makeGrid(w, h), randomCells(w, h))


neighborPositionsAt :: Vec2 -> List Vec2
neighborPositionsAt = (at) => [
  { x: at.x - 1, y: at.y - 1 },
  { x: at.x, y: at.y - 1 },
  { x: at.x + 1, y: at.y - 1 },
  { x: at.x + 1, y: at.y },
  { x: at.x + 1, y: at.y + 1 },
  { x: at.x, y: at.y + 1 },
  { x: at.x - 1, y: at.y + 1 },
  { x: at.x - 1, y: at.y },
]


isLivingAt :: Cells -> Vec2 -> Boolean
isLivingAt = (cells, at) => pipe(
  Dictionary.get(at.x),
  where {
    Nothing =>
      false

    Just(rows) =>
      Set.includes(at.y, rows)
  },
)(cells)


getSquareInfoAt :: Game -> Vec2 -> SquareInfo
getSquareInfoAt = (game, at) => {
  cells = getCells(game)
  squareState = isLivingAt(cells, at) ? Alive : Dead

  neighborCount = pipe(
    neighborPositionsAt,
    List.filter(isLivingAt(cells)),
    List.length,
  )(at)

  return SquareInfo(at, squareState, neighborCount)
}


insertCellAt :: Vec2 -> Cells -> Cells
insertCellAt = (at, cells) => where(Dictionary.get(at.x, cells)) {
  Just(rows) =>
    Dictionary.insert(at.x, Set.insert(at.y, rows), cells)

  Nothing =>
    Dictionary.insert(at.x, Set.singleton(at.y), cells)
}


computeNextGeneration :: Game -> Cells
computeNextGeneration = (game) => pipe(
  getGrid,
  List.reduce(
    (acc, square) => pipe(
      getSquareInfoAt(game),
      where {
        SquareInfo(at, Dead, x) =>
          x == 3 ? insertCellAt(at, acc) : acc

        SquareInfo(at, Alive, x) =>
          x == 2 || x == 3 ? insertCellAt(at, acc) : acc
      },
    )(square),
    Dictionary.empty,
  ),
)(game)


tick :: Game -> Game
export tick = (game) => {
  grid = getGrid(game)
  nextCells = computeNextGeneration(game)
  return Game(grid, nextCells)
}


// ---- Render --------------------------------------------

moveCursor = (x, y) => `\x1b[${show(y)};${show(x)}H`


printAt :: String -> Integer -> Integer -> {}
printAt = (s, x, y) => IO.put(`${moveCursor(x, y)}${s}`)


FULL_SQUARE = "█"
UPPER_SQUARE = "▀"
LOWER_SQUARE = "▄"


renderSquare :: Integer -> Integer -> Game -> {}
renderSquare = (x, y, game) => {
  targetY = Integer.fromFloat(y / 2)
  if (y % 2 == 0) {
    if (isLivingAt(getCells(game), { x, y: y + 1 })) {
      printAt(FULL_SQUARE, x + 1, targetY + 1)
    } else {
      printAt(UPPER_SQUARE, x + 1, targetY + 1)
    }
  } else if (!isLivingAt(getCells(game), { x, y: y - 1 })) {
    printAt(LOWER_SQUARE, x + 1, targetY + 1)
  }
}


render :: Game -> {}
export render = (game) => {
  Terminal.clearScreen()
  pipe(
    getCells,
    Dictionary.mapWithKey((x, cols) => { map(renderSquare(x, $, game), cols) }),
  )(game)
}
